[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Simulating dice throws to understand how probabilities work\n\n\n\nsimulation\n\n\nstatistics\n\n\npython\n\n\n\n\n\n\n\nAdmir Junior\n\n\nDec 11, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Admir C. de O. Junior",
    "section": "",
    "text": "Hello, nice to meet you!\nI’m a biologist and mathematician with skills in statistics, data science and programming.\nAcademically, I’m mostly interested in all aspects of ecological modeling—from theory to practice, and its implications.\nThis website serves as my portfolio. Here, you will find information about me, my work, and side projects.\nFeel free to reach out!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "Hi! My name is Admir Cesar de Oliveira Junior. I’m a mix of a biologist and a mathematician, but above all, I’m an absolute nerd. I love learning, developing, researching, and teaching.\nMy academic work focuses on theoretical and computational ecology, especially using machine learning. I also have experience as a math and biology teacher and as a data analyst/scientist. This has helped me develop expertise in programming and data analysis. Essentially, I’m able to transform large, messy datasets into valuable insights using statistical and machine learning models—and a bit of magic. I’m equally capable at extracting meaningful information with little data. I can also create beautiful visualizations to express data. I’m proficient in R, Python, C++ and SQL, and I’m currently learning Julia. Additionally, I have advanced knowledge of Excel and intermediate skills in power BI.\nThroughout my experiences, I’ve developed a wide range of hard and soft skills. One of the most important, to me, is the ability to communicate data and findings effectively to people of all ages and backgrounds. I’ve also worked on several projects involving machine learning, AI, and statistical data analysis, where I’ve learned how to collaborate with background diverse teams and find ways to make it work.\nIn addition to all of this, I’m a big fan of history, geography, and literature. I can play many instruments (Brazilian viola is my favorite) and could talk about the Roman Empire for hours. I’m also a huge fan of Dune, The Lord of the Rings, and romantic poetry. On the left is a photo of me, happy to be meeting my nearly-namesake, Julius Caesar, in Uruguay."
  },
  {
    "objectID": "projects/dice_simulations/index.html",
    "href": "projects/dice_simulations/index.html",
    "title": "Simulating dice throws to understand how probabilities work",
    "section": "",
    "text": "In a lecture about probabilities, after many examples using dices and colored balls, one of my students challenged me to throw three dices. If the sum of the faces summed more than 12, I would have to dismiss the class or let them play cards instead of studying.\nI got intrigued about the odds of this bet. What is the probabilities of them winning this? Well, with some calculation I was able to found that the probabilities of them winning were about 25.9%, what seemed pretty high for me, given that the max sum of the three dices is 18. So, to confront my theoretical approach, I decided to construct a computational simulation of this.\nBasically, we just need to create something that simulates dice throws, what is pretty easy:\n\nimport random\n\nn_dices = 3 # number of dices\n\n# Here we roll the dices\ndice_throws = [random.randint(1, 6) for _ in range(n_dices)]\nprint(f\"Rolled: {dice_throws}\")\nprint(f\"Sum: {sum(dice_throws)}\")\n\nRolled: [4, 2, 3]\nSum: 9\n\n\nNice.\nHowever, 1 repetition does not make statistics, so we need to throw it many times if we want to test something. So, we will throw three dices five times, storing its sum in a list, just to test the ideia:\n\nimport random\n\nn_dices = 3 # number of dices\nrepetitions = 5 # number of repetitions\n\n# Here we roll the dices\nexperiment = []\nfor i in range(0, repetitions):\n  \n  dice_throws = [random.randint(1, 6) for _ in range(n_dices)]\n  dice_sum = sum(dice_throws)\n  experiment.append(dice_sum)\n  \nprint(experiment)\n\n[10, 14, 12, 13, 12]\n\n\nThis is the result of our experiment (for now). But to make it serious, we need to increase the number of repetitions. Let us make it 1000. Also, we are only interested in throws that summed &gt; 12, so lets only count those. Also, I will set a seed for the randomness generator, just for it to be reproducible:\n\nimport random\nrandom.seed(13) # set seed\n\nn_dices = 3 # number of dices\nrepetitions = 1000 # number of repetitions\n\n# Here we roll the dices\nexperiment = []\nfor i in range(0, repetitions):\n  \n  dice_throws = [random.randint(1, 6) for _ in range(n_dices)]\n  dice_sum = sum(dice_throws)\n  experiment.append(dice_sum)\n  \ngreater_than_12 = sum([n &gt; 12 for n in experiment])\nprint(greater_than_12)\n\n251\n\n\nWow, 251 of 1000 throws. It’s 25,1% of chance! Pretty close to the theoretical 25,9%… but not enough. Let us expand that. We will now include replicates, something very important in experiment designs. So, we will run the experiment 10 times, and compute the probabilities for each. We will consider our final result as the arithmetic mean of those.\nYou know what? Let’s make 100,000 repetitions… and remove the seed, to ensure it is random!\n\nimport random\nimport statistics as st\nrandom.seed(13) # set seed\n\nn_dices = 3 # number of dices\nrepetitions = 100000 # number of repetitions\nreplicates = 5\n\n# Here we roll the dices\nexperiment = []\nfor j in range(0, replicates):\n  rolls = [] \n  for i in range(0, repetitions):\n  \n    dice_throws = [random.randint(1, 6) for _ in range(n_dices)]\n    dice_sum = sum(dice_throws)\n    rolls.append(dice_sum)\n  \n  greater_than_12 = sum([n &gt; 12 for n in rolls])\n  prob = greater_than_12/repetitions\n    \n  experiment.append(prob)\n\nprint(st.mean(experiment))\n\n0.259412\n\n\nWhen I first ran this code, I got 25.9412%. Pretty close, huh?\nProbabilities are amazing."
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "This is an essay written back on college. It was my final work to graduate in Biological Sciences. Here I argument in favor of the inclusion of poetry as a way to teach and learn science."
  },
  {
    "objectID": "publications.html#becoming-eearth-2023",
    "href": "publications.html#becoming-eearth-2023",
    "title": "Publications",
    "section": "",
    "text": "This is an essay written back on college. It was my final work to graduate in Biological Sciences. Here I argument in favor of the inclusion of poetry as a way to teach and learn science."
  }
]